(start-server)
(pump-in-evt {:event :set-map-view :lat 60.0 :lon 30.0})
(pump-in-evt {:event :set-map-view :lat 50.0 :lon 8.0})
(pump-in-evt {:event :set-map-view :lat 40.8 :lon -74.0})
(start-server)
(exit)
(start-server)
(exit)
(start-server)
(exit)
(start-server)
(exit)
(start-server)
(exit)
(airports)
(count (:airports @FRS))
(count (get (:airports @FRS) "rows"))
(def aps (get (:airports @FRS) "rows"))
(first aps)
(def aps1 (reduce #(assoc %1 (get %2 "country") %2) {} aps))
(count aps1)
(take 5 aps1)
(get aps1 "Togo")
(get aps1 "Belarus")
(get aps1 "Pakistan")
(def aps1 (reduce #(assoc %1 (get %2 "country") (conj (get %1 "country") %2)) {} aps))
(count aps1)
(get aps1 "Togo")
(get aps1 "Belarus")
(get aps1 "Pakistan")
(conj nil 'a)
(def aps1 (reduce #(assoc %1 (get %2 "country") (conj (get %1 (get %2 "country")) %2)) {} aps))
(get aps1 "Togo")
(get aps1 "Belarus")
(get aps1 "Pakistan")
(load-file "src/clj/rete4flight/core.clj")
(count (:airports @FRS))
(dissoc @FRS :airports)
(count (airports))
(get (:airports @FRS) "Togo")
(count (:airports @FRS))
(dissoc @FRS :airports)
(count (:airports @FRS))
@FRS
(swap! FRS dissoc :airports)
(count (:airports @FRS))
(count (airports))
(get (:airports @FRS) "Togo")
(get (:airports @FRS) "Belarus")
(map println (get (:airports @FRS) "Belarus"))
(start-server)
(contries)
(sort (contries))
(start-server)
(load-file "src/clj/rete4flight/core.clj")
(start-server)
(load-file "src/clj/rete4flight/core.clj")
(resolve (symbol "move-to"))
((resolve (symbol "move-to")) {})
(load-file "src/clj/rete4flight/core.clj")
(resolve (symbol "move-to"))
(symbol "move-to")
(load-file "src/clj/rete4flight/core.clj")
({
)
(resolve 'move-to)
(resolve rete4flight.core 'move-to)
(resolve 'rete4flight.core 'move-to)
*ns*
(ns-resolve *ns* 'move-to)
(load-file "src/clj/rete4flight/core.clj")
(resolve 'rete4flight.core 'move-to)
(find-ns 'rete4flight.core)
(load-file "src/clj/rete4flight/core.clj")
(start-server)
(load-file "src/clj/rete4flight/core.clj")
(start-server)
(load-file "src/clj/rete4flight/core.clj")
(start-server)
